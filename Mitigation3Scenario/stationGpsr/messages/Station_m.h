//
// Generated file, do not edit! Created by opp_msgtool 6.0 from stationGpsr/messages/Station.msg.
//

#ifndef __INET_STATION_M_H
#define __INET_STATION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class StationNotice;
class PositionRequest;
class PositionResponse;
class S2SPositionRequest;
class S2SPositionResponse;
class SimpleMessage;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TlvOptions_m.h" // import inet.common.TlvOptions

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

// cplusplus {{
#include "inet/routing/gpsr/GpsrDefs.h"
// }}


namespace inet {

/**
 * Class generated from <tt>stationGpsr/messages/Station.msg:15</tt> by opp_msgtool.
 * <pre>
 * class StationNotice extends FieldsChunk
 * {
 *     L3Address address;
 *     Coord position;
 *     bool deregister;
 *     string droneSignature;
 *     uint64_t droneNonce;
 * }
 * </pre>
 */
class StationNotice : public ::inet::FieldsChunk
{
  protected:
    L3Address address;
    Coord position;
    bool deregister = false;
    ::omnetpp::opp_string droneSignature;
    uint64_t droneNonce = 0;

  private:
    void copy(const StationNotice& other);

  protected:
    bool operator==(const StationNotice&) = delete;

  public:
    StationNotice();
    StationNotice(const StationNotice& other);
    virtual ~StationNotice();
    StationNotice& operator=(const StationNotice& other);
    virtual StationNotice *dup() const override {return new StationNotice(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const L3Address& getAddress() const;
    virtual L3Address& getAddressForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<StationNotice*>(this)->getAddress());}
    virtual void setAddress(const L3Address& address);

    virtual const Coord& getPosition() const;
    virtual Coord& getPositionForUpdate() { handleChange();return const_cast<Coord&>(const_cast<StationNotice*>(this)->getPosition());}
    virtual void setPosition(const Coord& position);

    virtual bool getDeregister() const;
    virtual void setDeregister(bool deregister);

    virtual const char * getDroneSignature() const;
    virtual void setDroneSignature(const char * droneSignature);

    virtual uint64_t getDroneNonce() const;
    virtual void setDroneNonce(uint64_t droneNonce);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StationNotice& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StationNotice& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stationGpsr/messages/Station.msg:24</tt> by opp_msgtool.
 * <pre>
 * class PositionRequest extends FieldsChunk
 * {
 *     L3Address source;
 *     string sourceModuleName;
 *     L3Address address;
 * }
 * </pre>
 */
class PositionRequest : public ::inet::FieldsChunk
{
  protected:
    L3Address source;
    ::omnetpp::opp_string sourceModuleName;
    L3Address address;

  private:
    void copy(const PositionRequest& other);

  protected:
    bool operator==(const PositionRequest&) = delete;

  public:
    PositionRequest();
    PositionRequest(const PositionRequest& other);
    virtual ~PositionRequest();
    PositionRequest& operator=(const PositionRequest& other);
    virtual PositionRequest *dup() const override {return new PositionRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const L3Address& getSource() const;
    virtual L3Address& getSourceForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<PositionRequest*>(this)->getSource());}
    virtual void setSource(const L3Address& source);

    virtual const char * getSourceModuleName() const;
    virtual void setSourceModuleName(const char * sourceModuleName);

    virtual const L3Address& getAddress() const;
    virtual L3Address& getAddressForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<PositionRequest*>(this)->getAddress());}
    virtual void setAddress(const L3Address& address);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PositionRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PositionRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stationGpsr/messages/Station.msg:32</tt> by opp_msgtool.
 * <pre>
 * // vedere se eliminare timestamp
 * class PositionResponse extends FieldsChunk
 * {
 *     bool setted;
 *     L3Address address;
 *     Coord position;
 *     simtime_t time;
 *     string stationSignature;
 *     uint64_t stationNonce;
 *     string droneSignature;
 *     uint64_t droneNonce;
 * }
 * </pre>
 */
class PositionResponse : public ::inet::FieldsChunk
{
  protected:
    bool setted = false;
    L3Address address;
    Coord position;
    ::omnetpp::simtime_t time = SIMTIME_ZERO;
    ::omnetpp::opp_string stationSignature;
    uint64_t stationNonce = 0;
    ::omnetpp::opp_string droneSignature;
    uint64_t droneNonce = 0;

  private:
    void copy(const PositionResponse& other);

  protected:
    bool operator==(const PositionResponse&) = delete;

  public:
    PositionResponse();
    PositionResponse(const PositionResponse& other);
    virtual ~PositionResponse();
    PositionResponse& operator=(const PositionResponse& other);
    virtual PositionResponse *dup() const override {return new PositionResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getSetted() const;
    virtual void setSetted(bool setted);

    virtual const L3Address& getAddress() const;
    virtual L3Address& getAddressForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<PositionResponse*>(this)->getAddress());}
    virtual void setAddress(const L3Address& address);

    virtual const Coord& getPosition() const;
    virtual Coord& getPositionForUpdate() { handleChange();return const_cast<Coord&>(const_cast<PositionResponse*>(this)->getPosition());}
    virtual void setPosition(const Coord& position);

    virtual ::omnetpp::simtime_t getTime() const;
    virtual void setTime(::omnetpp::simtime_t time);

    virtual const char * getStationSignature() const;
    virtual void setStationSignature(const char * stationSignature);

    virtual uint64_t getStationNonce() const;
    virtual void setStationNonce(uint64_t stationNonce);

    virtual const char * getDroneSignature() const;
    virtual void setDroneSignature(const char * droneSignature);

    virtual uint64_t getDroneNonce() const;
    virtual void setDroneNonce(uint64_t droneNonce);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PositionResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PositionResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stationGpsr/messages/Station.msg:44</tt> by opp_msgtool.
 * <pre>
 * class S2SPositionRequest extends FieldsChunk
 * {
 *     L3Address applicant;
 *     string applicantModuleName;
 *     L3Address source;
 *     string sourceModuleName;
 *     L3Address address;
 * }
 * </pre>
 */
class S2SPositionRequest : public ::inet::FieldsChunk
{
  protected:
    L3Address applicant;
    ::omnetpp::opp_string applicantModuleName;
    L3Address source;
    ::omnetpp::opp_string sourceModuleName;
    L3Address address;

  private:
    void copy(const S2SPositionRequest& other);

  protected:
    bool operator==(const S2SPositionRequest&) = delete;

  public:
    S2SPositionRequest();
    S2SPositionRequest(const S2SPositionRequest& other);
    virtual ~S2SPositionRequest();
    S2SPositionRequest& operator=(const S2SPositionRequest& other);
    virtual S2SPositionRequest *dup() const override {return new S2SPositionRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const L3Address& getApplicant() const;
    virtual L3Address& getApplicantForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<S2SPositionRequest*>(this)->getApplicant());}
    virtual void setApplicant(const L3Address& applicant);

    virtual const char * getApplicantModuleName() const;
    virtual void setApplicantModuleName(const char * applicantModuleName);

    virtual const L3Address& getSource() const;
    virtual L3Address& getSourceForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<S2SPositionRequest*>(this)->getSource());}
    virtual void setSource(const L3Address& source);

    virtual const char * getSourceModuleName() const;
    virtual void setSourceModuleName(const char * sourceModuleName);

    virtual const L3Address& getAddress() const;
    virtual L3Address& getAddressForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<S2SPositionRequest*>(this)->getAddress());}
    virtual void setAddress(const L3Address& address);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const S2SPositionRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, S2SPositionRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stationGpsr/messages/Station.msg:54</tt> by opp_msgtool.
 * <pre>
 * // vedere se eliminare timestamp
 * class S2SPositionResponse extends FieldsChunk
 * {
 *     L3Address applicant;
 *     string applicantModuleName;
 *     bool setted;
 *     L3Address address;
 *     Coord position;
 *     simtime_t time;
 *     string stationSignature;
 *     uint64_t stationNonce;
 *     string droneSignature;
 *     uint64_t droneNonce;
 * }
 * </pre>
 */
class S2SPositionResponse : public ::inet::FieldsChunk
{
  protected:
    L3Address applicant;
    ::omnetpp::opp_string applicantModuleName;
    bool setted = false;
    L3Address address;
    Coord position;
    ::omnetpp::simtime_t time = SIMTIME_ZERO;
    ::omnetpp::opp_string stationSignature;
    uint64_t stationNonce = 0;
    ::omnetpp::opp_string droneSignature;
    uint64_t droneNonce = 0;

  private:
    void copy(const S2SPositionResponse& other);

  protected:
    bool operator==(const S2SPositionResponse&) = delete;

  public:
    S2SPositionResponse();
    S2SPositionResponse(const S2SPositionResponse& other);
    virtual ~S2SPositionResponse();
    S2SPositionResponse& operator=(const S2SPositionResponse& other);
    virtual S2SPositionResponse *dup() const override {return new S2SPositionResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const L3Address& getApplicant() const;
    virtual L3Address& getApplicantForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<S2SPositionResponse*>(this)->getApplicant());}
    virtual void setApplicant(const L3Address& applicant);

    virtual const char * getApplicantModuleName() const;
    virtual void setApplicantModuleName(const char * applicantModuleName);

    virtual bool getSetted() const;
    virtual void setSetted(bool setted);

    virtual const L3Address& getAddress() const;
    virtual L3Address& getAddressForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<S2SPositionResponse*>(this)->getAddress());}
    virtual void setAddress(const L3Address& address);

    virtual const Coord& getPosition() const;
    virtual Coord& getPositionForUpdate() { handleChange();return const_cast<Coord&>(const_cast<S2SPositionResponse*>(this)->getPosition());}
    virtual void setPosition(const Coord& position);

    virtual ::omnetpp::simtime_t getTime() const;
    virtual void setTime(::omnetpp::simtime_t time);

    virtual const char * getStationSignature() const;
    virtual void setStationSignature(const char * stationSignature);

    virtual uint64_t getStationNonce() const;
    virtual void setStationNonce(uint64_t stationNonce);

    virtual const char * getDroneSignature() const;
    virtual void setDroneSignature(const char * droneSignature);

    virtual uint64_t getDroneNonce() const;
    virtual void setDroneNonce(uint64_t droneNonce);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const S2SPositionResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, S2SPositionResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stationGpsr/messages/Station.msg:68</tt> by opp_msgtool.
 * <pre>
 * class SimpleMessage extends FieldsChunk
 * {
 *     string payload;
 * }
 * </pre>
 */
class SimpleMessage : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string payload;

  private:
    void copy(const SimpleMessage& other);

  protected:
    bool operator==(const SimpleMessage&) = delete;

  public:
    SimpleMessage();
    SimpleMessage(const SimpleMessage& other);
    virtual ~SimpleMessage();
    SimpleMessage& operator=(const SimpleMessage& other);
    virtual SimpleMessage *dup() const override {return new SimpleMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SimpleMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SimpleMessage& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::StationNotice *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::StationNotice*>(ptr.get<cObject>()); }
template<> inline inet::PositionRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::PositionRequest*>(ptr.get<cObject>()); }
template<> inline inet::PositionResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::PositionResponse*>(ptr.get<cObject>()); }
template<> inline inet::S2SPositionRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::S2SPositionRequest*>(ptr.get<cObject>()); }
template<> inline inet::S2SPositionResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::S2SPositionResponse*>(ptr.get<cObject>()); }
template<> inline inet::SimpleMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SimpleMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_STATION_M_H

